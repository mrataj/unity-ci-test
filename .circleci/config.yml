# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1
description: |
    Easily build and test Unity projects. The project artifacts and test results are stored in CircleCI and can be opened in the Workflow web app. Supports Windows, Linux and macOS.
display:
    home_url: https://game.ci/docs/circleci/getting-started
    source_url: https://github.com/game-ci/unity-orb
commands:
    build:
        description: |
            This command builds an Unity project.
        parameters:
            build-method:
                default: ""
                description: |
                    The method used as argument for the Unity CLI "executeMethod" parameter.
                    It must be a valid path to a static method and the class exist in the Assets/Editor directory.
                    If left empty, the default build method will be used.
                type: string
            build-name:
                default: ""
                description: |
                    Enter the name for this build.
                    If left blank, the build will be named after the target platform.
                type: string
            build-target:
                description: |
                    The target platform of your build.
                    Accepted arguments vary with Unity's version and can be found in the docs: https://docs.unity3d.com/2021.2/Documentation/ScriptReference/BuildTarget.html
                type: string
            cache-version:
                default: v1
                description: |
                    Change the default cache version if you need to clear the cache for any reason.
                type: string
            compress:
                default: true
                description: |
                    Whether to compress the build output to a ".tar.gz" archive.
                    This is recommended if you want to download the built artifacts from the CircleCI web app.
                    If left to "false" for decompressed WebGL builds, you can run the project directly from the CircleCI web app.
                type: boolean
            custom-parameters:
                default: ""
                description: |
                    Additional arguments for the Unity CLI.
                    Use it to pass arguments defined on your custom "build-method" or Unity's build options. Environment variables are supported.
                    The parameters must be separated by space and must be in the format "-key value" or "-key" for booleans.
                    Example: "-customArg1 WebGL -EnableHeadlessMode -customArg2 $CIRCLE_WORKFLOW_ID".
                type: string
            include-branch-in-cache-key:
                default: true
                description: |
                    If true, this cache bucket will only apply to jobs within the same branch.
                type: boolean
            no_output_timeout:
                default: 10m
                description: Elapsed time the command can run without output.
                type: string
            project-path:
                default: .
                description: |
                    Enter the relative path of your Unity project.
                    This should be the directory that has an "Assets" folder inside it.
                type: string
            step-name:
                default: Build the project
                description: |
                    Specify a custom step name for this command, if desired.
                type: string
            store-artifacts:
                default: true
                description: |
                    Whether to store the build output.
                    If left to "false" you won't be able to download the build from the job's artifacts.
                type: boolean
        steps:
            - run:
                command: |
                    #!/usr/bin/env bash
                    # shellcheck disable=SC2034

                    readonly base_dir="${CIRCLE_WORKING_DIRECTORY/\~/$HOME}"
                    readonly unity_project_full_path="$base_dir/$PARAM_PROJECT_PATH"

                    # Import "utils.sh".
                    eval "$SCRIPT_UTILS"

                    # Detect host OS.
                    detect-os

                    # Copy builder to project directory if a custom isn't specified.
                    build_method="$PARAM_BUILD_METHOD"
                    if [ -z "$PARAM_BUILD_METHOD" ]; then
                      printf '%s\n' "The \"build-method\" parameter is empty. Falling back to the default build script."
                      mkdir -p "$unity_project_full_path/Assets/Editor/"
                      printf '%s\n' "$DEPENDENCY_UNITY_BUILDER" > "$unity_project_full_path/Assets/Editor/BuildCommand.cs"
                      build_method="BuildCommand.PerformBuild"
                    fi

                    # Expand custom parameters, if any.
                    custom_parameters="$(eval echo "$PARAM_CUSTOM_PARAMETERS")"

                    # If "build_name" is blank, use the build target.
                    if [ -z "$PARAM_BUILD_NAME" ]; then PARAM_BUILD_NAME="$PARAM_BUILD_TARGET"; fi

                    if [ "$PLATFORM" = "linux" ]; then eval "$SCRIPT_BUILD_LINUX";
                    elif [ "$PLATFORM" = "macos" ]; then eval "$SCRIPT_BUILD_MACOS";
                    elif [ "$PLATFORM" = "windows" ]; then eval "$SCRIPT_BUILD_WINDOWS";
                    fi
                environment:
                    DEPENDENCY_UNITY_BUILDER: "using UnityEditor;\nusing System.Linq;\nusing System;\nusing System.IO;\n\nstatic class BuildCommand\n{\n    private const string KEYSTORE_PASS  = \"KEYSTORE_PASS\";\n    private const string KEY_ALIAS_PASS = \"KEY_ALIAS_PASS\";\n    private const string KEY_ALIAS_NAME = \"KEY_ALIAS_NAME\";\n    private const string KEYSTORE       = \"keystore.keystore\";\n    private const string BUILD_OPTIONS_ENV_VAR = \"BuildOptions\";\n    private const string ANDROID_BUNDLE_VERSION_CODE = \"VERSION_BUILD_VAR\";\n    private const string ANDROID_APP_BUNDLE = \"BUILD_APP_BUNDLE\";\n    private const string SCRIPTING_BACKEND_ENV_VAR = \"SCRIPTING_BACKEND\";\n    private const string VERSION_NUMBER_VAR = \"VERSION_NUMBER_VAR\";\n    private const string VERSION_iOS = \"VERSION_BUILD_VAR\";\n    \n    static string GetArgument(string name)\n    {\n        string[] args = Environment.GetCommandLineArgs();\n        for (int i = 0; i < args.Length; i++)\n        {\n            if (args[i].Contains(name))\n            {\n                return args[i + 1];\n            }\n        }\n        return null;\n    }\n\n    static string[] GetEnabledScenes()\n    {\n        return (\n            from scene in EditorBuildSettings.scenes\n            where scene.enabled\n            where !string.IsNullOrEmpty(scene.path)\n            select scene.path\n        ).ToArray();\n    }\n\n    static BuildTarget GetBuildTarget()\n    {\n        string buildTargetName = GetArgument(\"customBuildTarget\");\n        Console.WriteLine(\":: Received customBuildTarget \" + buildTargetName);\n\n        if (buildTargetName.ToLower() == \"android\")\n        {\n#if !UNITY_5_6_OR_NEWER\n\t\t\t// https://issuetracker.unity3d.com/issues/buildoptions-dot-acceptexternalmodificationstoplayer-causes-unityexception-unknown-project-type-0\n\t\t\t// Fixed in Unity 5.6.0\n\t\t\t// side effect to fix android build system:\n\t\t\tEditorUserBuildSettings.androidBuildSystem = AndroidBuildSystem.Internal;\n#endif\n        }\n\n        if (buildTargetName.TryConvertToEnum(out BuildTarget target))\n            return target;\n\n        Console.WriteLine($\":: {nameof(buildTargetName)} \\\"{buildTargetName}\\\" not defined on enum {nameof(BuildTarget)}, using {nameof(BuildTarget.NoTarget)} enum to build\");\n\n        return BuildTarget.NoTarget;\n    }\n\n    static string GetBuildPath()\n    {\n        string buildPath = GetArgument(\"customBuildPath\");\n        Console.WriteLine(\":: Received customBuildPath \" + buildPath);\n        if (buildPath == \"\")\n        {\n            throw new Exception(\"customBuildPath argument is missing\");\n        }\n        return buildPath;\n    }\n\n    static string GetBuildName()\n    {\n        string buildName = GetArgument(\"customBuildName\");\n        Console.WriteLine(\":: Received customBuildName \" + buildName);\n        if (buildName == \"\")\n        {\n            throw new Exception(\"customBuildName argument is missing\");\n        }\n        return buildName;\n    }\n\n    static string GetFixedBuildPath(BuildTarget buildTarget, string buildPath, string buildName)\n    {\n        if (buildTarget.ToString().ToLower().Contains(\"windows\")) {\n            buildName += \".exe\";\n        } else if (buildTarget == BuildTarget.Android) {\n#if UNITY_2018_3_OR_NEWER\n            buildName += EditorUserBuildSettings.buildAppBundle ? \".aab\" : \".apk\";\n#else\n            buildName += \".apk\";\n#endif\n        }\n        return buildPath + buildName;\n    }\n\n    static BuildOptions GetBuildOptions()\n    {\n        if (TryGetEnv(BUILD_OPTIONS_ENV_VAR, out string envVar)) {\n            string[] allOptionVars = envVar.Split(',');\n            BuildOptions allOptions = BuildOptions.None;\n            BuildOptions option;\n            string optionVar;\n            int length = allOptionVars.Length;\n\n            Console.WriteLine($\":: Detecting {BUILD_OPTIONS_ENV_VAR} env var with {length} elements ({envVar})\");\n\n            for (int i = 0; i < length; i++) {\n                optionVar = allOptionVars[i];\n\n                if (optionVar.TryConvertToEnum(out option)) {\n                    allOptions |= option;\n                }\n                else {\n                    Console.WriteLine($\":: Cannot convert {optionVar} to {nameof(BuildOptions)} enum, skipping it.\");\n                }\n            }\n\n            return allOptions;\n        }\n\n        return BuildOptions.None;\n    }\n\n    // https://stackoverflow.com/questions/1082532/how-to-tryparse-for-enum-value\n    static bool TryConvertToEnum<TEnum>(this string strEnumValue, out TEnum value)\n    {\n        if (!Enum.IsDefined(typeof(TEnum), strEnumValue))\n        {\n            value = default;\n            return false;\n        }\n\n        value = (TEnum)Enum.Parse(typeof(TEnum), strEnumValue);\n        return true;\n    }\n\n    static bool TryGetEnv(string key, out string value)\n    {\n        value = Environment.GetEnvironmentVariable(key);\n        return !string.IsNullOrEmpty(value);\n    }\n\n    static void SetScriptingBackendFromEnv(BuildTarget platform) {\n        var targetGroup = BuildPipeline.GetBuildTargetGroup(platform);\n        if (TryGetEnv(SCRIPTING_BACKEND_ENV_VAR, out string scriptingBackend)) {\n            if (scriptingBackend.TryConvertToEnum(out ScriptingImplementation backend)) {\n                Console.WriteLine($\":: Setting ScriptingBackend to {backend}\");\n                PlayerSettings.SetScriptingBackend(targetGroup, backend);\n            } else {\n                string possibleValues = string.Join(\", \", Enum.GetValues(typeof(ScriptingImplementation)).Cast<ScriptingImplementation>());\n                throw new Exception($\"Could not find '{scriptingBackend}' in ScriptingImplementation enum. Possible values are: {possibleValues}\");\n            }\n        } else {\n            var defaultBackend = PlayerSettings.GetDefaultScriptingBackend(targetGroup);\n            Console.WriteLine($\":: Using project's configured ScriptingBackend (should be {defaultBackend} for targetGroup {targetGroup}\");\n        }\n    }\n\n    static void PerformBuild()\n    {\n        var buildTarget = GetBuildTarget();\n\n        Console.WriteLine(\":: Performing build\");\n        if (TryGetEnv(VERSION_NUMBER_VAR, out var bundleVersionNumber))\n        {\n            if (buildTarget == BuildTarget.iOS)\n            {\n                bundleVersionNumber = GetIosVersion();\n            }\n            Console.WriteLine($\":: Setting bundleVersionNumber to '{bundleVersionNumber}' (Length: {bundleVersionNumber.Length})\");\n            PlayerSettings.bundleVersion = bundleVersionNumber;\n        }\n\n        if (buildTarget == BuildTarget.Android) {\n            HandleAndroidAppBundle();\n            HandleAndroidBundleVersionCode();\n            HandleAndroidKeystore();\n        }\n\n        var buildPath      = GetBuildPath();\n        var buildName      = GetBuildName();\n        var buildOptions   = GetBuildOptions();\n        var fixedBuildPath = GetFixedBuildPath(buildTarget, buildPath, buildName);\n\n        SetScriptingBackendFromEnv(buildTarget);\n\n        var buildReport = BuildPipeline.BuildPlayer(GetEnabledScenes(), fixedBuildPath, buildTarget, buildOptions);\n\n        if (buildReport.summary.result != UnityEditor.Build.Reporting.BuildResult.Succeeded)\n            throw new Exception($\"Build ended with {buildReport.summary.result} status\");\n\n        Console.WriteLine(\":: Done with build\");\n    }\n\n    private static void HandleAndroidAppBundle()\n    {\n        if (TryGetEnv(ANDROID_APP_BUNDLE, out string value))\n        {\n#if UNITY_2018_3_OR_NEWER\n            if (bool.TryParse(value, out bool buildAppBundle))\n            {\n                EditorUserBuildSettings.buildAppBundle = buildAppBundle;\n                Console.WriteLine($\":: {ANDROID_APP_BUNDLE} env var detected, set buildAppBundle to {value}.\");\n            }\n            else\n            {\n                Console.WriteLine($\":: {ANDROID_APP_BUNDLE} env var detected but the value \\\"{value}\\\" is not a boolean.\");\n            }\n#else\n            Console.WriteLine($\":: {ANDROID_APP_BUNDLE} env var detected but does not work with lower Unity version than 2018.3\");\n#endif\n        }\n    }\n\n    private static void HandleAndroidBundleVersionCode()\n    {\n        if (TryGetEnv(ANDROID_BUNDLE_VERSION_CODE, out string value))\n        {\n            if (int.TryParse(value, out int version))\n            {\n                PlayerSettings.Android.bundleVersionCode = version;\n                Console.WriteLine($\":: {ANDROID_BUNDLE_VERSION_CODE} env var detected, set the bundle version code to {value}.\");\n            }\n            else\n                Console.WriteLine($\":: {ANDROID_BUNDLE_VERSION_CODE} env var detected but the version value \\\"{value}\\\" is not an integer.\");\n        }\n    }\n\n    private static string GetIosVersion()\n    {\n        if (TryGetEnv(VERSION_iOS, out string value))\n        {\n            if (int.TryParse(value, out int version))\n            {\n                Console.WriteLine($\":: {VERSION_iOS} env var detected, set the version to {value}.\");\n                return version.ToString();\n            }\n            else\n                Console.WriteLine($\":: {VERSION_iOS} env var detected but the version value \\\"{value}\\\" is not an integer.\");\n        }\n\n        throw new ArgumentNullException(nameof(value), $\":: Error finding {VERSION_iOS} env var\");\n    }\n\n    private static void HandleAndroidKeystore()\n    {\n#if UNITY_2019_1_OR_NEWER\n        PlayerSettings.Android.useCustomKeystore = false;\n#endif\n\n        if (!File.Exists(KEYSTORE)) {\n            Console.WriteLine($\":: {KEYSTORE} not found, skipping setup, using Unity's default keystore\");\n            return;    \n        }\n\n        PlayerSettings.Android.keystoreName = KEYSTORE;\n\n        string keystorePass;\n        string keystoreAliasPass;\n\n        if (TryGetEnv(KEY_ALIAS_NAME, out string keyaliasName)) {\n            PlayerSettings.Android.keyaliasName = keyaliasName;\n            Console.WriteLine($\":: using ${KEY_ALIAS_NAME} env var on PlayerSettings\");\n        } else {\n            Console.WriteLine($\":: ${KEY_ALIAS_NAME} env var not set, using Project's PlayerSettings\");\n        }\n\n        if (!TryGetEnv(KEYSTORE_PASS, out keystorePass)) {\n            Console.WriteLine($\":: ${KEYSTORE_PASS} env var not set, skipping setup, using Unity's default keystore\");\n            return;\n        }\n\n        if (!TryGetEnv(KEY_ALIAS_PASS, out keystoreAliasPass)) {\n            Console.WriteLine($\":: ${KEY_ALIAS_PASS} env var not set, skipping setup, using Unity's default keystore\");\n            return;\n        }\n#if UNITY_2019_1_OR_NEWER\n        PlayerSettings.Android.useCustomKeystore = true;\n#endif\n        PlayerSettings.Android.keystorePass = keystorePass;\n        PlayerSettings.Android.keyaliasPass = keystoreAliasPass;\n    }\n}\n"
                    PARAM_BUILD_METHOD: << parameters.build-method >>
                    PARAM_BUILD_NAME: << parameters.build-name >>
                    PARAM_BUILD_TARGET: << parameters.build-target >>
                    PARAM_COMPRESS: << parameters.compress >>
                    PARAM_CUSTOM_PARAMETERS: << parameters.custom-parameters >>
                    PARAM_PROJECT_PATH: << parameters.project-path >>
                    SCRIPT_BUILD_LINUX: |
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2048,SC2154,SC2086

                        readonly build_path="$unity_project_full_path/Builds/$PARAM_BUILD_TARGET/"
                        mkdir -p "$build_path"

                        set -x
                        ${UNITY_EXECUTABLE:-xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' unity-editor} \
                          -projectPath "$unity_project_full_path" \
                          -quit \
                          -batchmode \
                          -nographics \
                          -buildTarget "$PARAM_BUILD_TARGET" \
                          -customBuildTarget "$PARAM_BUILD_TARGET" \
                          -customBuildName "$PARAM_BUILD_NAME" \
                          -customBuildPath "$build_path" \
                          -executeMethod "$build_method" \
                          -logFile /dev/stdout \
                          $custom_parameters # Needs to be unquoted. Otherwise it will be treated as a single parameter.
                        set +x

                        if [ "$PARAM_COMPRESS" -eq 1 ]; then
                          printf '%s\n' 'Compressing build artifacts...'

                          # Compress artifacts to store them in the artifacts bucket.
                          tar -czf "$base_dir/$PARAM_BUILD_TARGET.tar.gz" -C "$build_path" .
                        fi
                    SCRIPT_BUILD_MACOS: |-
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2048,SC2154,SC2086

                        readonly build_path="$unity_project_full_path/Builds/$PARAM_BUILD_TARGET"
                        mkdir -p "$build_path"

                        set -x
                        # Build the project
                        "$UNITY_EDITOR_PATH" \
                          -quit \
                          -batchmode \
                          -nographics \
                          -projectPath "$unity_project_full_path" \
                          -buildTarget "$PARAM_BUILD_TARGET" \
                          -customBuildTarget "$PARAM_BUILD_TARGET" \
                          -customBuildPath "$build_path/$PARAM_BUILD_NAME" \
                          -executeMethod "$build_method" \
                          -buildVersion "1.0.0" \
                          -logfile /dev/stdout \
                          $custom_parameters # Needs to be unquoted. Otherwise it will be treated as a single parameter.
                        set +x

                        if [ "$PARAM_COMPRESS" -eq 1 ]; then
                          printf '%s\n' 'Compressing build artifacts...'

                          # Compress artifacts to store them in the artifacts bucket.
                          tar -czf "$base_dir/$PARAM_BUILD_TARGET.tar.gz" -C "$build_path" .
                        fi
                    SCRIPT_BUILD_WINDOWS: |
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2016,SC2154

                        trap_exit() {
                          local exit_status="$?"

                          if [ "$exit_status" -ne 0 ]; then
                            printf '%s\n' 'The script did not complete successfully.'

                            printf '%s\n' "Removing the container \"$CONTAINER_NAME\"."
                            docker rm -f "$CONTAINER_NAME" &> /dev/null || true

                            exit "$exit_status"
                          fi
                        }
                        trap trap_exit EXIT

                        # Add the build target and build name in the environment variables.
                        docker exec "$CONTAINER_NAME" powershell "[System.Environment]::SetEnvironmentVariable('BUILD_NAME','$PARAM_BUILD_NAME', [System.EnvironmentVariableTarget]::Machine)"
                        docker exec "$CONTAINER_NAME" powershell "[System.Environment]::SetEnvironmentVariable('BUILD_TARGET','$PARAM_BUILD_TARGET', [System.EnvironmentVariableTarget]::Machine)"
                        docker exec "$CONTAINER_NAME" powershell "[System.Environment]::SetEnvironmentVariable('BUILD_METHOD','$build_method', [System.EnvironmentVariableTarget]::Machine)"
                        docker exec "$CONTAINER_NAME" powershell "[System.Environment]::SetEnvironmentVariable('CUSTOM_PARAMS','$custom_parameters', [System.EnvironmentVariableTarget]::Machine)"

                        build_args=(
                          '-batchmode'
                          '-quit'
                          '-nographics'
                          '-projectPath $Env:PROJECT_PATH'
                          '-buildTarget $Env:BUILD_TARGET'
                          '-customBuildTarget $Env:BUILD_TARGET'
                          '-customBuildName $Env:BUILD_NAME'
                          '-customBuildPath "C:/build/"'
                          '-executeMethod $Env:BUILD_METHOD'
                        )

                        [ -n "$custom_parameters" ] && build_args+=( '$Env:CUSTOM_PARAMS.split()' )

                        # Build the project
                        # Versioning of the project needs work. This is how it's done in the GHA:
                        # https://github.com/game-ci/unity-builder/blob/main/src/model/versioning.ts
                        set -x
                        docker exec "$CONTAINER_NAME" powershell "& 'C:\Program Files\Unity\Hub\Editor\*\Editor\Unity.exe' ${build_args[*]} -logfile | Out-Host"
                        exit_code="$?"
                        set +x

                        if [ "$exit_code" -ne 0 ]; then
                          printf '%s\n' "Failed to build the project."
                          printf '%s\n' "Please try again, open an issue or reach out to us on Discord."
                          exit "$exit_code"
                        fi

                        printf '%s\n' "Build completed successfully:"
                        ls -la "$base_dir/build"

                        if [ "$PARAM_COMPRESS" -eq 1 ]; then
                          printf '%s\n' "Compressing artifacts..."
                          tar -czf "$base_dir/${PARAM_BUILD_TARGET}.tar.gz" -C "$base_dir/build" .
                          printf '%s\n' "Done."
                          ls -la "$base_dir"
                        fi
                    SCRIPT_UTILS: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\ndetect-os() {\n  local detected_platform\n  \n  detected_platform=\"$(uname -s | tr '[:upper:]' '[:lower:]')\"\n\n  case \"$detected_platform\" in\n    linux*)\n      printf '%s\\n' \"Detected OS: Linux.\"\n      PLATFORM=linux\n      ;;\n    darwin*)\n      printf '%s\\n' \"Detected OS: macOS.\"\n      PLATFORM=macos\n      ;;\n    msys*|cygwin*)\n      printf '%s\\n' \"Detected OS: Windows.\"\n      PLATFORM=windows\n      ;;\n    *)\n      printf '%s\\n' \"Unsupported OS: \\\"$platform\\\".\"\n      exit 1\n      ;;\n  esac\n\n  export readonly PLATFORM\n}"
                name: << parameters.step-name >>
                no_output_timeout: << parameters.no_output_timeout >>
            - save_cache:
                key: unity-deps-{{ arch }}-<< parameters.cache-version >>-<<# parameters.include-branch-in-cache-key >>{{ .Branch }}-<</ parameters.include-branch-in-cache-key >>{{ checksum "<< parameters.project-path >>/Packages/packages-lock.json" }}
                paths:
                    - << parameters.project-path >>/Library/
            - when:
                condition:
                    and:
                        - << parameters.store-artifacts >>
                        - << parameters.compress >>
                steps:
                    - store_artifacts:
                        path: << parameters.build-target >>.tar.gz
            - when:
                condition:
                    and:
                        - << parameters.store-artifacts >>
                        - not: << parameters.compress >>
                steps:
                    - store_artifacts:
                        path: << parameters.project-path >>/Builds/<< parameters.build-target >>
    prepare-env:
        description: |
            This command prepares the environment for testing or building an Unity project.
        parameters:
            cache-version:
                default: v1
                description: |
                    Change the default cache version if you need to clear the cache for any reason.
                type: string
            include-branch-in-cache-key:
                default: true
                description: |
                    If true, this cache bucket will only apply to jobs within the same branch.
                type: boolean
            no_output_timeout:
                default: 10m
                description: Elapsed time the command can run without output.
                type: string
            project-path:
                default: .
                description: |
                    Enter the path of your Unity project.
                    This should be the directory that has an "Assets" folder inside it.
                type: string
            unity-license-var-name:
                default: UNITY_ENCODED_LICENSE
                description: |
                    Enter the name of the environment variable containing your Unity license file encoded in base64.
                    Required if you have a Personal license.
                type: env_var_name
            unity-password-var-name:
                default: UNITY_PASSWORD
                description: |
                    Enter the name of the environment variable containing your Unity password.
                type: env_var_name
            unity-serial-var-name:
                default: UNITY_SERIAL
                description: |
                    Enter the name of the environment variable containing your Unity serial number.
                    Required if you have a Plus or Pro license.
                type: env_var_name
            unity-username-var-name:
                default: UNITY_USERNAME
                description: |
                    Enter the name of the environment variable containing your Unity username.
                type: env_var_name
        steps:
            - restore_cache:
                keys:
                    - unity-deps-{{ arch }}-<< parameters.cache-version >>-<<# parameters.include-branch-in-cache-key >>{{ .Branch }}-<</ parameters.include-branch-in-cache-key >>{{ checksum "<< parameters.project-path >>/Packages/packages-lock.json" }}
                    - unity-deps-{{ arch }}-<< parameters.cache-version >>-<<# parameters.include-branch-in-cache-key >>{{ .Branch }}<</ parameters.include-branch-in-cache-key >>
            - run:
                command: |
                    #!/usr/bin/env bash
                    # shellcheck disable=SC2034

                    readonly base_dir="${CIRCLE_WORKING_DIRECTORY/\~/$HOME}"
                    readonly unity_project_full_path="$base_dir/$PARAM_PROJECT_PATH"

                    # Import "utils.sh".
                    eval "$SCRIPT_UTILS"

                    # Detect host OS.
                    detect-os

                    # Expand environment name variable parameters.
                    readonly unity_username="${!PARAM_UNITY_USERNAME_VAR_NAME}"
                    readonly unity_password="${!PARAM_UNITY_PASSWORD_VAR_NAME}"
                    readonly unity_serial="${!PARAM_UNITY_SERIAL_VAR_NAME}"
                    readonly unity_encoded_license="${!PARAM_UNITY_LICENSE_VAR_NAME}"

                    if [ "$PLATFORM" = "linux" ]; then eval "$SCRIPT_PREPARE_ENV_LINUX";
                    elif [ "$PLATFORM" = "macos" ]; then eval "$SCRIPT_PREPARE_ENV_MACOS";
                    elif [ "$PLATFORM" = "windows" ]; then eval "$SCRIPT_PREPARE_ENV_WINDOWS";
                    fi
                environment:
                    PARAM_PROJECT_PATH: << parameters.project-path >>
                    PARAM_UNITY_LICENSE_VAR_NAME: << parameters.unity-license-var-name >>
                    PARAM_UNITY_PASSWORD_VAR_NAME: << parameters.unity-password-var-name >>
                    PARAM_UNITY_SERIAL_VAR_NAME: << parameters.unity-serial-var-name >>
                    PARAM_UNITY_USERNAME_VAR_NAME: << parameters.unity-username-var-name >>
                    SCRIPT_PREPARE_ENV_LINUX: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\ncreate_manual_activation_file() {\n  unity-editor \\\n    -batchmode \\\n    -nographics \\\n    -createManualActivationFile \\\n    -quit \\\n    -logfile /dev/null\n\n  # Check if license file was created successfully.\n  if ls Unity_v*.alf &> /dev/null; then return 0; else return 1; fi\n}\n\nresolve_unity_license() {\n  if [ -n \"$unity_encoded_license\" ]; then\n    # Decode Personal Unity License File.\n    unity_license=$(printf '%s\\n' \"$unity_encoded_license\" | base64 --decode)\n\n  elif [ -n \"$unity_username\" ] && [ -n \"$unity_password\" ] && [ -n \"$unity_serial\" ]; then\n    # Generate Plus or Pro Unity License File.\n    unity-editor \\\n      -logFile /dev/stdout \\\n      -batchmode \\\n      -nographics \\\n      -quit \\\n      -username \"$unity_username\" \\\n      -password \"$unity_password\" \\\n      -serial \"$unity_serial\"\n\n    if [ -e \"/root/.local/share/unity3d/Unity/Unity_lic.ulf\" ]; then\n      unity_license=\"$(cat /root/.local/share/unity3d/Unity/Unity_lic.ulf)\"\n    else\n      printf '%s\\n' \"Failed to generate Unity license file.\"\n      printf '%s\\n' \"Make sure you have entered the correct username, password and serial and try again.\"\n      printf '%s\\n' \"If you are still having problems, please open an issue.\"\n      printf '%s\\n' \"See the docs for more details: https://game.ci/docs/circleci/activation#professional-license\"\n\n      return 1\n    fi\n\n  else\n    printf '%s\\n' \"If you own a Personal Unity License File (.ulf), please provide it as a base64 encoded string.\"  \n    printf '%s\\n' \"If you own a Plus or Pro Unity license, please provide your username, password and serial.\"\n    printf '%s\\n' \"See the docs for more details: https://game.ci/docs/circleci/activation\"\n\n    if create_manual_activation_file; then\n      printf '%s\\n' \"Should you require a new Personal Activation License File (.alf), rerun the job with SSH and you will find it at \\\"${base_dir}/$(ls Unity_v*)\\\"\"\n    fi\n\n    return 1\n  fi\n}\n\n# Check if serial or encoded license was provided.\n# If the latter, extract the serial from the license.\nif ! resolve_unity_license; then\n  printf '%s\\n' \"Failed to find the serial or parse it from the Unity license.\"\n  printf '%s\\n' \"Please try again or open an issue.\"\n  exit 1\nfi\n\n# Download before_script.sh from GameCI.\ncurl --silent --location \\\n  --request GET \\\n  --url \"https://gitlab.com/game-ci/unity3d-gitlab-ci-example/-/raw/main/ci/before_script.sh\" \\\n  --header 'Accept: application/vnd.github.v3+json' \\\n  --output \"$base_dir/before_script.sh\"\n\nchmod +x \"$base_dir/before_script.sh\"\n\n# Nomenclature required by the script.\nreadonly UNITY_LICENSE=\"$unity_license\"\n\nexport UNITY_LICENSE\n\n# Run the test script.\n# shellcheck source=/dev/null\nsource \"$base_dir/before_script.sh\""
                    SCRIPT_PREPARE_ENV_MACOS: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\nreadonly unity_hub_path=\"/Applications/Unity Hub.app/Contents/MacOS/Unity Hub\"\nreadonly unity_editor_path=\"/Applications/Unity/Hub/Editor/$UNITY_EDITOR_VERSION/Unity.app/Contents/MacOS/Unity\"\n\nprintf '%s\\n' \"export UNITY_HUB_PATH=\\\"$unity_hub_path\\\"\" >> \"$BASH_ENV\"\nprintf '%s\\n' \"export UNITY_EDITOR_PATH=$unity_editor_path\" >> \"$BASH_ENV\"\n\ncheck_and_install_unity_hub() {\n  if [ ! -f \"$unity_hub_path\" ]; then\n    printf '%s\\n' \"Could not find Unity Hub at \\\"$unity_hub_path\\\".\"\n    printf '%s\\n' \"Installing it with brew...\"\n\n    brew install --cask unity-hub\n\n    if [ -f \"$unity_hub_path\" ]; then\n      printf '%s\\n' \"Unity Hub installed successfully.\"\n\n    else\n      printf '%s\\n' \"Could not install the Unity Hub.\"\n      printf '%s\\n' \"Please try again or open an issue.\"\n      return 1\n    fi\n  fi\n\n  return 0\n}\n\ncheck_and_install_unity_editor() {\n  if [ ! -f \"$unity_editor_path\" ]; then\n    printf '%s\\n' \"Could not find the Unity Editor at \\\"$unity_editor_path\\\".\"\n    printf '%s\\n' \"Installing it with the Unity Hub...\"\n\n    if check_and_install_unity_hub; then\n\n      if ! command -v npm &> /dev/null; then\n        printf '%s\\n' \"npm is required to fetch the Unity Editor changeset.\"\n        printf '%s\\n' \"Please install it and try again.\"\n        return 1\n      fi\n\n      changeset=\"$(npx unity-changeset \"$UNITY_EDITOR_VERSION\")\"\n\n      set -x\n      \"$unity_hub_path\" -- --headless install --version \"$UNITY_EDITOR_VERSION\" --changeset \"$changeset\" --module mac-il2cpp --childModules\n      set +x\n\n      if [ -f \"$unity_editor_path\" ]; then\n        printf '%s\\n' \"Unity Editor installed successfully.\"\n\n      else\n        printf '%s\\n' \"Could not install the Unity Editor.\"\n        printf '%s\\n' \"Please try again or open an issue.\"\n        return 1\n      fi\n    else\n      printf '%s\\n' \"Could not install the Editor because Unity Hub is not installed.\"\n      return 1\n    fi\n  fi\n\n  return 0\n}\n\nresolve_unity_serial() {\n  if [ -n \"$unity_username\" ] && [ -n \"$unity_password\" ]; then\n    # Serial provided.\n    if [ -n \"$unity_serial\" ]; then\n      printf '%s\\n' \"Detected Unity serial.\"\n      readonly resolved_unity_serial=\"$unity_serial\"\n\n    # License provided.\n    elif [ -n \"$unity_encoded_license\" ]; then\n      printf '%s\\n' \"No serial detected. Extracting it from the encoded license.\"\n      \n      if ! extract_serial_from_license; then\n        printf '%s\\n' \"Failed to parse the serial from the Unity license.\"\n        printf '%s\\n' \"Please try again or open an issue.\"\n        printf '%s\\n' \"See the docs for more details: https://game.ci/docs/circleci/activation#personal-license\"\n        return 1\n      \n      else\n        readonly resolved_unity_serial=\"$decoded_unity_serial\"\n      fi\n\n    # Nothing provided.\n    else\n      printf '%s\\n' \"No serial or encoded license found.\"\n      printf '%s\\n' \"Please run the script again with a serial or encoded license file.\"\n      printf '%s\\n' \"See the docs for more details: https://game.ci/docs/circleci/activation\"\n      return 1\n    fi\n  fi\n\n  return 0\n}\n\nextract_serial_from_license() {\n  # Fix locale setting in PERL.\n  # https://stackoverflow.com/a/7413863\n  export LC_CTYPE=en_US.UTF-8\n  export LC_ALL=en_US.UTF-8 \n\n  local unity_license\n  local developer_data\n  local encoded_serial\n\n  unity_license=\"$(base64 --decode \\<<< \"$unity_encoded_license\")\"\n  developer_data=\"$(perl -nle 'print $& while m{<DeveloperData Value\\=\"\\K.*?(?=\"/>)}g' \\<<< \"$unity_license\")\"\n  encoded_serial=\"$(cut -c 5- \\<<< \"$developer_data\")\"\n  \n  decoded_unity_serial=\"$(base64 --decode \\<<< \"$encoded_serial\")\"\n  readonly decoded_unity_serial\n\n  if [ -n \"$decoded_unity_serial\" ]; then return 0; else return 1; fi\n}\n\n# Install the Editor if not already installed.\nif ! check_and_install_unity_editor; then\n  printf '%s\\n' \"Something went wrong.\"\n  printf '%s\\n' \"Please try again or open an issue.\"\n  exit 1\nfi\n\n# Check if serial or encoded license was provided.\n# If the latter, extract the serial from the license.\nif ! resolve_unity_serial; then\n  printf '%s\\n' \"Failed to find the serial or parse it from the Unity license.\"\n  printf '%s\\n' \"Please try again or open an issue.\"\n  exit 1\nfi\n\n# If it doesn't exist, create folder for the Unity License File.\nreadonly unity_license_file_path=\"/Library/Application Support/Unity\"\nsudo mkdir -p \"$unity_license_file_path\"\nsudo chmod -R 777 \"$unity_license_file_path\"\n\n# Activate the Unity Editor.\nset -x\n\"$unity_editor_path\" \\\n  -batchmode \\\n  -quit \\\n  -nographics \\\n  -username \"$unity_username\" \\\n  -password \"$unity_password\" \\\n  -serial \"$resolved_unity_serial\" \\\n  -logfile /dev/stdout\nset +x"
                    SCRIPT_PREPARE_ENV_WINDOWS: |
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2154

                        trap_exit() {
                          local exit_status="$?"

                          if [ "$exit_status" -ne 0 ]; then
                            printf '%s\n' 'The script did not complete successfully.'

                            printf '%s\n' "Removing the container \"$container_name\"."
                            docker rm -f "$container_name" &> /dev/null || true

                            exit "$exit_status"
                          fi
                        }
                        trap trap_exit EXIT

                        resolve_unity_serial() {
                          local exit_code=0

                          if [ -n "$unity_username" ] && [ -n "$unity_password" ]; then
                            # Serial provided.
                            if [ -n "$unity_serial" ]; then
                              printf '%s\n' "Detected Unity serial."
                              readonly resolved_unity_serial="$unity_serial"

                            # License provided.
                            elif [ -n "$unity_encoded_license" ]; then
                              printf '%s\n' "No serial detected. Extracting it from the encoded license."

                              if ! extract_serial_from_license; then
                                printf '%s\n' "Failed to parse the serial from the Unity license."
                                printf '%s\n' "Please try again or open an issue."
                                printf '%s\n' "See the docs for more details: https://game.ci/docs/circleci/activation#personal-license"

                                exit_code=1

                              else
                                readonly resolved_unity_serial="$decoded_unity_serial"
                              fi

                            # Nothing provided.
                            else
                              printf '%s\n' "No serial or encoded license found."
                              printf '%s\n' "Please run the script again with a serial or encoded license file."
                              printf '%s\n' "See the docs for more details: https://game.ci/docs/circleci/activation"

                              exit_code=1
                            fi
                          fi

                          return "$exit_code"
                        }

                        extract_serial_from_license() {
                          export LANG=C.UTF-8

                          local unity_license
                          local developer_data
                          local encoded_serial

                          unity_license="$(base64 --decode \<<< "$unity_encoded_license")"
                          developer_data="$(grep -oP '<DeveloperData Value\="\K.*?(?="/>)' \<<< "$unity_license")"
                          encoded_serial="$(cut -c 5- \<<< "$developer_data")"

                          decoded_unity_serial="$(base64 --decode \<<< "$encoded_serial")"
                          readonly decoded_unity_serial

                          if [ -n "$decoded_unity_serial" ]; then return 0; else return 1; fi
                        }

                        # Install the Windows 10 SDK.
                        choco upgrade windows-sdk-10.1 visualstudio2022-workload-vctools --no-progress -y

                        # Extract the Windows SDK registry key.
                        mkdir -p "$base_dir/regkeys"
                        powershell "reg export HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\\"Microsoft SDKs\"\\Windows\\v10.0 $base_dir/regkeys/winsdk.reg /y"

                        readonly container_name="${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM}"
                        printf '%s\n' "export CONTAINER_NAME=$container_name" >> "$BASH_ENV"

                        # Delete any existing containers.
                        if docker ps -a | grep -wq "$container_name"; then
                          docker rm -f "$container_name"
                        fi

                        # Check if serial or encoded license was provided.
                        # If the latter, extract the serial from the license.
                        if ! resolve_unity_serial; then
                          printf '%s\n' "Failed to find the serial or parse it from the Unity license."
                          printf '%s\n' "Please try again or open an issue."
                          exit 1
                        fi

                        # Create folders to store artifacts.
                        mkdir -p "$base_dir/build" || { printf '%s\n' "Unable to create the build directory"; exit 1; }
                        mkdir -p "$base_dir/test" || { printf '%s\n' "Unable to create the test directory"; exit 1; }

                        set -x

                        # Run the container and prevent it from exiting.
                        # shellcheck disable=SC2140
                        docker run -dit \
                          --name "$container_name" \
                          --env PROJECT_PATH="C:/unity_project" \
                          --env UNITY_USERNAME="$unity_username" \
                          --env UNITY_PASSWORD="$unity_password" \
                          --env UNITY_SERIAL="$resolved_unity_serial" \
                          --volume "$unity_project_full_path":C:/unity_project \
                          --volume "$base_dir"/regkeys:"C:/regkeys" \
                          --volume "$base_dir"/build:"C:/build" \
                          --volume "$base_dir"/test:"C:/test" \
                          --volume "C:/Program Files (x86)/Microsoft Visual Studio":"C:/Program Files (x86)/Microsoft Visual Studio" \
                          --volume "C:/Program Files (x86)/Windows Kits":"C:/Program Files (x86)/Windows Kits" \
                          --volume "C:/ProgramData/Microsoft/VisualStudio":"C:/ProgramData/Microsoft/VisualStudio" \
                          "unityci/editor:windows-${GAMECI_EDITOR_VERSION}-${GAMECI_TARGET_PLATFORM}-1" \
                          powershell

                        set +x

                        # Register the Windows SDK and VCC Tools.
                        docker exec "$container_name" powershell 'reg import C:\regkeys\winsdk.reg'
                        docker exec "$container_name" powershell 'regsvr32 /s C:\ProgramData\Microsoft\VisualStudio\Setup\x64\Microsoft.VisualStudio.Setup.Configuration.Native.dll'

                        # Activate Unity
                        docker exec "$container_name" powershell '& "C:\Program Files\Unity\Hub\Editor\*\Editor\Unity.exe" -batchmode -quit -nographics -username $Env:UNITY_USERNAME -password $Env:UNITY_PASSWORD -serial $Env:UNITY_SERIAL -logfile | Out-Host'
                    SCRIPT_UTILS: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\ndetect-os() {\n  local detected_platform\n  \n  detected_platform=\"$(uname -s | tr '[:upper:]' '[:lower:]')\"\n\n  case \"$detected_platform\" in\n    linux*)\n      printf '%s\\n' \"Detected OS: Linux.\"\n      PLATFORM=linux\n      ;;\n    darwin*)\n      printf '%s\\n' \"Detected OS: macOS.\"\n      PLATFORM=macos\n      ;;\n    msys*|cygwin*)\n      printf '%s\\n' \"Detected OS: Windows.\"\n      PLATFORM=windows\n      ;;\n    *)\n      printf '%s\\n' \"Unsupported OS: \\\"$platform\\\".\"\n      exit 1\n      ;;\n  esac\n\n  export readonly PLATFORM\n}"
                name: Prepare the environment
                no_output_timeout: << parameters.no_output_timeout >>
    return-license:
        description: |
            This command returns the license used to build or test the project.
        parameters:
            unity-password-var-name:
                default: UNITY_PASSWORD
                description: |
                    Enter the name of the environment variable containing your Unity password.
                type: env_var_name
            unity-username-var-name:
                default: UNITY_USERNAME
                description: |
                    Enter the name of the environment variable containing your Unity username.
                type: env_var_name
        steps:
            - run:
                command: |-
                    #!/usr/bin/env bash
                    # shellcheck disable=SC2034

                    readonly base_dir="${CIRCLE_WORKING_DIRECTORY/\~/$HOME}"

                    # Import "utils.sh".
                    eval "$SCRIPT_UTILS"

                    # Detect host OS.
                    detect-os

                    # Expand environment name variable parameters.
                    readonly unity_username="${!PARAM_UNITY_USERNAME_VAR_NAME}"
                    readonly unity_password="${!PARAM_UNITY_PASSWORD_VAR_NAME}"

                    if [ "$PLATFORM" = "linux" ]; then eval "$SCRIPT_RETURN_LICENSE_LINUX";
                    elif [ "$PLATFORM" = "macos" ]; then eval "$SCRIPT_RETURN_LICENSE_MACOS";
                    elif [ "$PLATFORM" = "windows" ]; then eval "$SCRIPT_RETURN_LICENSE_WINDOWS";
                    fi
                environment:
                    PARAM_UNITY_PASSWORD_VAR_NAME: << parameters.unity-password-var-name >>
                    PARAM_UNITY_USERNAME_VAR_NAME: << parameters.unity-username-var-name >>
                    SCRIPT_RETURN_LICENSE_LINUX: |-
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2154

                        set -x
                        # Return license
                        unity-editor \
                          -quit \
                          -batchmode \
                          -nographics \
                          -returnlicense \
                          -username "$unity_username" \
                          -password "$unity_password" \
                          -logfile /dev/stdout
                        set +x
                    SCRIPT_RETURN_LICENSE_MACOS: |-
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2154

                        set -x
                        # Return license
                        "$UNITY_EDITOR_PATH" \
                          -quit \
                          -batchmode \
                          -nographics \
                          -returnlicense \
                          -username "$unity_username" \
                          -password "$unity_password" \
                          -logfile /dev/stdout
                        set +x
                    SCRIPT_RETURN_LICENSE_WINDOWS: |-
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2154

                        trap_exit() {
                          local exit_status="$?"

                          if [ "$exit_status" -ne 0 ]; then
                            printf '%s\n' 'The script did not complete successfully.'

                            printf '%s\n' "Removing the container \"$CONTAINER_NAME\"."
                            docker rm -f "$CONTAINER_NAME" &> /dev/null || true

                            exit "$exit_status"
                          fi
                        }
                        trap trap_exit EXIT

                        set -x
                        # Return license
                        docker exec "$CONTAINER_NAME" powershell '& "C:\Program Files\Unity\Hub\Editor\*\Editor\Unity.exe" -returnlicense -batchmode -quit -nographics -username $Env:UNITY_USERNAME -password $Env:UNITY_PASSWORD -logfile | Out-Host'
                        set +x

                        # Remove the container.
                        docker rm -f "$CONTAINER_NAME"
                    SCRIPT_UTILS: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\ndetect-os() {\n  local detected_platform\n  \n  detected_platform=\"$(uname -s | tr '[:upper:]' '[:lower:]')\"\n\n  case \"$detected_platform\" in\n    linux*)\n      printf '%s\\n' \"Detected OS: Linux.\"\n      PLATFORM=linux\n      ;;\n    darwin*)\n      printf '%s\\n' \"Detected OS: macOS.\"\n      PLATFORM=macos\n      ;;\n    msys*|cygwin*)\n      printf '%s\\n' \"Detected OS: Windows.\"\n      PLATFORM=windows\n      ;;\n    *)\n      printf '%s\\n' \"Unsupported OS: \\\"$platform\\\".\"\n      exit 1\n      ;;\n  esac\n\n  export readonly PLATFORM\n}"
                name: Return the Unity license
    test:
        description: |
            This command tests an Unity project.
        parameters:
            cache-version:
                default: v1
                description: |
                    Change the default cache version if you need to clear the cache for any reason.
                type: string
            include-branch-in-cache-key:
                default: true
                description: |
                    If true, this cache bucket will only apply to jobs within the same branch.
                type: boolean
            no_output_timeout:
                default: 10m
                description: Elapsed time the command can run without output.
                type: string
            project-path:
                default: .
                description: |
                    Enter the relative path of your Unity project.
                    This should be the directory that has an "Assets" folder inside it.
                type: string
            step-name:
                default: Run tests
                description: |
                    Specify a custom step name for this command, if desired.
                type: string
            test-platform:
                default: playmode
                description: |
                    Specify the test platform to run tests on.
                    Valid values are "editmode", "playmode" and Unity's target builds.
                    More information can be found on: https://docs.unity3d.com/Packages/com.unity.test-framework@2.0/manual/reference-command-line.html
                type: string
        steps:
            - run:
                command: |
                    #!/usr/bin/env bash
                    # shellcheck disable=SC2034

                    readonly base_dir="${CIRCLE_WORKING_DIRECTORY/\~/$HOME}"
                    readonly unity_project_full_path="$base_dir/$PARAM_PROJECT_PATH"

                    # Import "utils.sh".
                    eval "$SCRIPT_UTILS"

                    # Detect host OS.
                    detect-os

                    if [ "$PLATFORM" = "linux" ]; then eval "$SCRIPT_TEST_LINUX";
                    elif [ "$PLATFORM" = "macos" ]; then eval "$SCRIPT_TEST_MACOS";
                    elif [ "$PLATFORM" = "windows" ]; then eval "$SCRIPT_TEST_WINDOWS";
                    fi
                environment:
                    DEPENDENCY_NUNIT_TRANSFORM: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n  <xsl:output method=\"xml\" indent=\"yes\"/>\n\n  <xsl:template match=\"/test-run\">\n    <testsuites tests=\"{@testcasecount}\" failures=\"{@failed}\" disabled=\"{@skipped}\" time=\"{@duration}\">\n      <xsl:apply-templates/>\n    </testsuites>\n  </xsl:template>\n\n  <xsl:template match=\"test-suite\">\n    <xsl:if test=\"test-case\">\n      <testsuite tests=\"{@testcasecount}\" time=\"{@duration}\" errors=\"{@testcasecount - @passed - @skipped - @failed}\" failures=\"{@failed}\" skipped=\"{@skipped}\" timestamp=\"{@start-time}\">\n        <xsl:attribute name=\"name\">\n          <xsl:for-each select=\"ancestor-or-self::test-suite/@name\">\n            <xsl:value-of select=\"concat(., '.')\"/>\n          </xsl:for-each>\n        </xsl:attribute>\n        <xsl:apply-templates select=\"test-case\"/>\n      </testsuite>\n      <xsl:apply-templates select=\"test-suite\"/>\n    </xsl:if>\n    <xsl:if test=\"not(test-case)\">\n      <xsl:apply-templates/>\n    </xsl:if>\n  </xsl:template>\n\n  <xsl:template match=\"test-case\">\n    <testcase name=\"{@name}\" assertions=\"{@asserts}\" time=\"{@duration}\" status=\"{@result}\" classname=\"{@classname}\">\n      <xsl:if test=\"@runstate = 'Skipped' or @runstate = 'Ignored'\">\n        <skipped/>\n      </xsl:if>\n      \n      <xsl:apply-templates/>\n    </testcase>\n  </xsl:template>\n\n  <xsl:template match=\"command-line\"/>\n  <xsl:template match=\"settings\"/>\n\n  <xsl:template match=\"output\">\n    <system-out>\n      <xsl:value-of select=\".\"/>\n    </system-out>\n  </xsl:template>\n\n  <xsl:template match=\"stack-trace\">\n  </xsl:template>\n\n  <xsl:template match=\"test-case/failure\">\n    <failure message=\"{./message}\">\n      <xsl:value-of select=\"./stack-trace\"/>\n    </failure>\n  </xsl:template>\n\n  <xsl:template match=\"test-suite/failure\"/>\n\n  <xsl:template match=\"test-case/reason\">\n    <skipped message=\"{./message}\"/>\n  </xsl:template>\n  \n  <xsl:template match=\"test-case/assertions\">\n  </xsl:template>\n\n  <xsl:template match=\"test-suite/reason\"/>\n\n  <xsl:template match=\"properties\"/>\n</xsl:stylesheet>\n\n"
                    PARAM_PROJECT_PATH: << parameters.project-path >>
                    PARAM_TEST_PLATFORM: << parameters.test-platform >>
                    SCRIPT_TEST_LINUX: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\ntrap_test_script_exit() {\n  local -r exit_status=\"$?\"\n\n  if [ \"$exit_status\" -ne 0 ]; then\n    printf '%s\\n' 'The script did not complete successfully.'\n    printf '%s\\n' \"The exit code was $exit_status\"\n\n    rm -rf \"$gameci_sample_project_dir\"\n    exit \"$exit_status\"\n  fi\n\n  # Intall dependencies for the JUnit parser.\n  apt-get update && apt-get install -y default-jre libsaxonb-java\n\n  # Parse Unity's results xml to JUnit format.\n  printf '%s\\n' \"$DEPENDENCY_NUNIT_TRANSFORM\" > \"$base_dir/nunit3-junit.xslt\"\n  saxonb-xslt -s \"$UNITY_DIR/$TEST_PLATFORM-results.xml\" -xsl \"$base_dir/nunit3-junit.xslt\" > \"$UNITY_DIR/$TEST_PLATFORM-junit-results.xml\"\n  \n  cat \"$UNITY_DIR/$TEST_PLATFORM-junit-results.xml\"\n\n  # Clean up.\n  rm -rf \"$gameci_sample_project_dir\"\n}\n\n# Download test script.\ncurl --silent --location \\\n  --request GET \\\n  --url \"https://gitlab.com/game-ci/unity3d-gitlab-ci-example/-/raw/main/ci/test.sh\" \\\n  --header 'Accept: application/vnd.github.v3+json' \\\n  --output \"$base_dir/test.sh\"\n\nchmod +x \"$base_dir/test.sh\"\n\n# Name variables as required by the \"test.sh\" script.\nreadonly TEST_PLATFORM=\"$PARAM_TEST_PLATFORM\"\nreadonly TESTING_TYPE=\"JUNIT\"\nreadonly UNITY_DIR=\"$unity_project_full_path\"\nreadonly CI_PROJECT_DIR=\"$gameci_sample_project_dir\"\nreadonly CI_PROJECT_NAME=\"$CIRCLE_PROJECT_REPONAME\"\n\nexport TEST_PLATFORM\nexport TESTING_TYPE\nexport UNITY_DIR\nexport CI_PROJECT_DIR\nexport CI_PROJECT_NAME\n\n# Trap \"test.sh\" exit otherwise it won't be possible to parse the results to JUnit format.\ntrap trap_test_script_exit EXIT\n\n# Run the test script.\n# shellcheck source=/dev/null\nsource \"$base_dir/test.sh\""
                    SCRIPT_TEST_MACOS: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\ncheck_and_install_saxonb() {\n  if ! brew list saxon-b &> /dev/null; then\n    printf '%s\\n' \"Saxon-B is required to parse Unity's XML results to the JUnit format.\"\n    printf '%s\\n' \"Installing it with Brew.\"\n    \n    if brew install saxon-b; then\n      printf '%s\\n' \"Saxon-B installed successfully.\"\n      saxonb_jar=\"$(brew --prefix saxon-b | xargs -I saxon_path find saxon_path/ -name saxon9.jar)\"\n      return 0\n\n    else\n      printf '%s\\n' \"Something went wrong.\"\n      printf '%s\\n' \"Please try again or open an issue.\"\n      return 1\n\n    fi\n  fi\n}\n\ncheck_and_install_java() {\n  if ! command -v java &> /dev/null; then\n    printf '%s\\n' \"Java is required to parse Unity's XML results to JUnit.\"\n    printf '%s\\n' \"Installing it with Brew.\"\n    \n    if brew cask install java; then\n      printf '%s\\n' \"Java installed successfully.\"\n      return 0\n\n    else\n      printf '%s\\n' \"Something went wrong.\"\n      printf '%s\\n' \"Please try again or open an issue.\"\n      return 1\n\n    fi\n  fi\n}\n\nparse_xml_to_junit() {\n  if ! check_and_install_java; then\n    printf '%s\\n' \"Java wasn't found and couldn't be installed.\"\n    printf '%s\\n' \"It won't be possible to parse Unity's XML results to JUnit.\"\n    return 1\n  fi\n\n  if ! check_and_install_saxonb; then\n    printf '%s\\n' \"Saxon-B wasn't found and couldn't be installed.\"\n    printf '%s\\n' \"Impossible to parse Unity's XML results to JUnit.\"\n    return 1\n  fi\n\n  printf '%s\\n' \"Parsing Unity's XML results to JUnit.\"\n  printf '%s\\n' \"$DEPENDENCY_NUNIT_TRANSFORM\" > \"$base_dir/nunit3-junit.xslt\"\n\n  java -jar \"$saxonb_jar\" -s \"$base_dir/results.xml\" -xsl \"$base_dir\"/nunit3-junit.xslt > \"$unity_project_full_path/$PARAM_TEST_PLATFORM-junit-results.xml\"\n  saxon_exit_code=$?\n\n  if [ \"$saxon_exit_code\" -ne 0 ] || [ ! -f \"$unity_project_full_path/$PARAM_TEST_PLATFORM-junit-results.xml\" ]; then\n    printf '%s\\n' \"Something went wrong.\"\n    printf '%s\\n' \"Please try again or open an issue.\"\n    return 1\n\n  else\n    printf '%s\\n' \"Unity's XML results parsed to JUnit successfully.\"\n    return 0\n  fi\n}\n\nset -x\n# Run the tests.\n\"$UNITY_EDITOR_PATH\" \\\n  -batchmode \\\n  -nographics \\\n  -projectPath \"$unity_project_full_path\" \\\n  -runTests \\\n  -testPlatform \"$PARAM_TEST_PLATFORM\" \\\n  -testResults \"$base_dir/results.xml\" \\\n  -logfile /dev/stdout\n\nunity_exit_code=$?\nset +x\n\nif [ \"$unity_exit_code\" -eq 0 ]; then\n  printf '%s\\n' \"Run succeeded, no failures occurred.\";\n  if ! parse_xml_to_junit; then exit 1; fi\n\nelif [ \"$unity_exit_code\" -eq 2 ]; then\n  printf '%s\\n' \"Run succeeded, some tests failed.\";\n  if ! parse_xml_to_junit; then exit 1; fi\n\nelif [ \"$unity_exit_code\" -eq 3 ]; then\n  printf '%s\\n' \"Run failure (other failure).\";\n  exit 1\nelse\n  printf '%s\\n' \"Unexpected exit code $unity_exit_code.\";\n  exit 1\nfi\n"
                    SCRIPT_TEST_WINDOWS: |
                        #!/bin/false
                        # shellcheck shell=bash
                        # shellcheck disable=SC2154

                        trap_exit() {
                          local exit_status="$?"

                          if [ "$exit_status" -ne 0 ]; then
                            printf '%s\n' 'The script did not complete successfully.'

                            printf '%s\n' "Removing the container \"$CONTAINER_NAME\"."
                            docker rm -f "$CONTAINER_NAME" &> /dev/null || true

                            exit "$exit_status"
                          fi
                        }
                        trap trap_exit EXIT

                        # Add the build target and build name in the environment variables.
                        docker exec "$CONTAINER_NAME" powershell "[System.Environment]::SetEnvironmentVariable('TEST_PLATFORM','$PARAM_TEST_PLATFORM', [System.EnvironmentVariableTarget]::Machine)"

                        # Run the tests.
                        docker exec "$CONTAINER_NAME" powershell '& "C:\Program Files\Unity\Hub\Editor\*\Editor\Unity.exe" -batchmode -nographics -projectPath $Env:PROJECT_PATH -runTests -testPlatform $Env:TEST_PLATFORM -testResults "C:/test/results.xml" -logfile | Out-Host'

                        # Install JDK to run Saxon.
                        docker exec "$CONTAINER_NAME" powershell 'choco upgrade jdk8 --no-progress -y'

                        # Download and extract Saxon-B.
                        docker exec "$CONTAINER_NAME" powershell 'Invoke-WebRequest -Uri "https://versaweb.dl.sourceforge.net/project/saxon/Saxon-B/9.1.0.8/saxonb9-1-0-8j.zip" -Method "GET" -OutFile "C:/test/saxonb.zip"'
                        docker exec "$CONTAINER_NAME" powershell "Expand-Archive -Force C:/test/saxonb.zip C:/test/saxonb"

                        # Copy the Saxon-B template to the container.
                        printf '%s\n' "$DEPENDENCY_NUNIT_TRANSFORM" > "$base_dir/test/nunit3-junit.xslt"

                        # Parse Unity's results xml to JUnit format.
                        docker exec "$CONTAINER_NAME" powershell 'java -jar C:/test/saxonb/saxon9.jar -s C:/test/results.xml -xsl C:/test/nunit3-junit.xslt > C:/test/junit-results.xml'

                        # Convert CRLF to LF otherwise CircleCI won't be able to read the results.
                        # https://stackoverflow.com/a/48919146
                        docker exec "$CONTAINER_NAME" powershell '((Get-Content C:/test/junit-results.xml) -join "`n") + "`n" | Set-Content -NoNewline -Encoding utf8 C:/test/junit-results-lf.xml'

                        # Move test results to project folder for upload.
                        mv "$base_dir"/test/junit-results-lf.xml "$unity_project_full_path"/"$PARAM_TEST_PLATFORM"-junit-results.xml
                    SCRIPT_UTILS: "#!/bin/false\n# shellcheck shell=bash\n# shellcheck disable=SC2154\n\ndetect-os() {\n  local detected_platform\n  \n  detected_platform=\"$(uname -s | tr '[:upper:]' '[:lower:]')\"\n\n  case \"$detected_platform\" in\n    linux*)\n      printf '%s\\n' \"Detected OS: Linux.\"\n      PLATFORM=linux\n      ;;\n    darwin*)\n      printf '%s\\n' \"Detected OS: macOS.\"\n      PLATFORM=macos\n      ;;\n    msys*|cygwin*)\n      printf '%s\\n' \"Detected OS: Windows.\"\n      PLATFORM=windows\n      ;;\n    *)\n      printf '%s\\n' \"Unsupported OS: \\\"$platform\\\".\"\n      exit 1\n      ;;\n  esac\n\n  export readonly PLATFORM\n}"
                name: << parameters.step-name >>
                no_output_timeout: << parameters.no_output_timeout >>
            - save_cache:
                key: unity-deps-{{ arch }}-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "<<parameters.project-path>>/Packages/packages-lock.json" }}
                paths:
                    - <<parameters.project-path>>/Library/
            - store_test_results:
                path: << parameters.project-path >>/<< parameters.test-platform >>-junit-results.xml
executors:
    macos:
        description: |
            Drop-in executor to build project in macOS.
        environment:
            - UNITY_EDITOR_VERSION=<< parameters.editor_version >>
        macos:
            resource_class: << parameters.resource_class >>
            xcode: << parameters.xcode_version >>
        parameters:
            editor_version:
                description: |
                    Pick the Unity Editor version.
                    Make sure to pick the same major version as the Unity version you generated the license for.
                    Available options can be found at https://unity3d.com/get-unity/download/archive.
                type: string
            resource_class:
                default: medium
                description: |
                    Resource class used for the executor.
                    If you are receiving a "CircleCI received exit code 137" from the build job, you may need to increase the resource class.
                    For details on resource class availability, see https://circleci.com/docs/using-macos#available-resource-classes.
                enum:
                    - medium
                    - macos.x86.medium.gen2
                    - large
                    - macos.x86.metal.gen1
                type: enum
            xcode_version:
                default: 13.4.1
                description: |
                    Pick the Xcode version.
                    Available options can be found at https://circleci.com/docs/using-macos#supported-xcode-versions.
                type: string
    macos-runner:
        description: |
            Drop-in executor to build projects in a macOS runner.
        environment:
            - UNITY_EDITOR_VERSION=<< parameters.editor_version >>
        machine: true
        parameters:
            editor_version:
                description: |
                    Pick the Unity Editor version.
                    Available options can be found at https://unity3d.com/get-unity/download/archive.
                type: string
            resource_class:
                description: |
                    Enter your Runner resource class.
                    For information on how to setup a Runner agent, see: https://circleci.com/docs/2.0/runner-overview/.
                type: string
            working_directory:
                default: /var/opt/circleci/workdir
                description: |
                    Enter the working directory of your runner agent.
                type: string
        resource_class: << parameters.resource_class >>
        working_directory: << parameters.working_directory >>
    ubuntu:
        description: |
            Select the Editor version and Target Platform for the GameCI image.
            Available target platforms can be found at: https://game.ci/docs/docker/versions.
            This executor only supports the "ubuntu" OS.
        docker:
            - environment:
                - GAMECI_EDITOR_VERSION=<< parameters.editor_version >>
                - GAMECI_TARGET_PLATFORM=<< parameters.target_platform >>
              image: unityci/editor:ubuntu-<<parameters.editor_version>>-<<parameters.target_platform>>-1
        parameters:
            editor_version:
                description: |
                    Pick the editor version for the GameCI image.
                    Make sure to pick the same major version as the Unity version you generated the license for.
                    Available options can be found at https://game.ci/docs/docker/versions.
                type: string
            resource_class:
                default: large
                description: |
                    Resource class used for the executor.
                    If you are receiving a "CircleCI received exit code 137" from the build job, you may need to increase the resource class.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                    - 2xlarge
                    - 2xlarge+
                type: enum
            target_platform:
                description: |
                    Pick the target platform for the GameCI image.
                    Available options can be found at https://game.ci/docs/docker/versions.
                    The 2018 release doesn't support the "linux-il2cpp" target platform.
                enum:
                    - android
                    - base
                    - ios
                    - linux-il2cpp
                    - mac-mono
                    - webgl
                    - windows-mono
                type: enum
        resource_class: << parameters.resource_class >>
    windows-2019:
        description: |
            Select the Editor version and Target Platform for the GameCI image.
            Available target platforms can be found at: https://game.ci/docs/docker/versions.
        environment:
            - GAMECI_EDITOR_VERSION=<< parameters.editor_version >>
            - GAMECI_TARGET_PLATFORM=<< parameters.target_platform >>
        machine:
            image: windows-server-2019-vs2019:<< parameters.version >>
            resource_class: windows.<< parameters.size >>
            shell: bash.exe
        parameters:
            editor_version:
                description: |
                    Pick the editor version for the GameCI image.
                    Make sure to pick the same major version as the Unity version you generated the license for.
                    Available options can be found at https://game.ci/docs/docker/versions.
                type: string
            size:
                default: large
                description: The size of Windows resource to use.
                enum:
                    - medium
                    - large
                    - xlarge
                    - 2xlarge
                type: enum
            target_platform:
                description: |
                    Pick the target platform for the GameCI image.
                    Available options can be found at https://game.ci/docs/docker/versions.
                    The 2018 release doesn't support the "linux-il2cpp" target platform.
                enum:
                    - appletv
                    - base
                    - universal-windows-platform
                    - windows-il2cpp
                type: enum
            version:
                default: current
                description: |
                    The Windows image version to use.
                type: string
    windows-2019-cuda:
        description: |
            Select the Editor version and Target Platform for the GameCI image.
            Available target platforms can be found at: https://game.ci/docs/docker/versions.
        environment:
            - GAMECI_EDITOR_VERSION=<< parameters.editor_version >>
            - GAMECI_TARGET_PLATFORM=<< parameters.target_platform >>
        machine:
            image: windows-server-2019-cuda:<< parameters.version >>
            resource_class: windows.gpu.nvidia.<< parameters.size >>
            shell: bash.exe
        parameters:
            editor_version:
                description: |
                    Pick the editor version for the GameCI image.
                    Make sure to pick the same major version as the Unity version you generated the license for.
                    Available options can be found at https://game.ci/docs/docker/versions.
                type: string
            size:
                default: medium
                description: The size of Windows resource to use.
                enum:
                    - small
                    - medium
                type: enum
            target_platform:
                description: |
                    Pick the target platform for the GameCI image.
                    Available options can be found at https://game.ci/docs/docker/versions.
                    The 2018 release doesn't support the "linux-il2cpp" target platform.
                enum:
                    - appletv
                    - base
                    - universal-windows-platform
                    - windows-il2cpp
                type: enum
            version:
                default: current
                description: |
                    The Windows image version to use.
                type: string
    windows-2022:
        description: |
            Select the Editor version and Target Platform for the GameCI image.
            Available target platforms can be found at: https://game.ci/docs/docker/versions.
        environment:
            - GAMECI_EDITOR_VERSION=<< parameters.editor_version >>
            - GAMECI_TARGET_PLATFORM=<< parameters.target_platform >>
        machine:
            image: windows-server-2022-gui:<< parameters.version >>
            resource_class: windows.<< parameters.size >>
            shell: bash.exe
        parameters:
            editor_version:
                description: |
                    Pick the editor version for the GameCI image.
                    Make sure to pick the same major version as the Unity version you generated the license for.
                    Available options can be found at https://game.ci/docs/docker/versions.
                type: string
            size:
                default: large
                description: The size of Windows resource to use.
                enum:
                    - medium
                    - large
                    - xlarge
                    - 2xlarge
                type: enum
            target_platform:
                description: |
                    Pick the target platform for the GameCI image.
                    Available options can be found at https://game.ci/docs/docker/versions.
                    The 2018 release doesn't support the "linux-il2cpp" target platform.
                enum:
                    - appletv
                    - base
                    - universal-windows-platform
                    - windows-il2cpp
                type: enum
            version:
                default: current
                description: |
                    The Windows image version to use.
                type: string
    windows-runner:
        description: |
            Select the Editor version and Target Platform for the GameCI image.
            Available target platforms can be found at: https://game.ci/docs/docker/versions.
            This executor only supports the "windows" OS and should be used with a CircleCI Runner.
            For information on how to setup a Runner agent, see: https://circleci.com/docs/2.0/runner-overview/.
        environment:
            - GAMECI_EDITOR_VERSION=<< parameters.editor_version >>
            - GAMECI_TARGET_PLATFORM=<< parameters.target_platform >>
        machine: true
        parameters:
            editor_version:
                description: |
                    Pick the editor version for the GameCI image.
                    Make sure to pick the same major version as the Unity version you generated the license for.
                    Available options can be found at https://game.ci/docs/docker/versions.
                type: string
            resource_class:
                description: |
                    Enter your Runner resource class.
                    For information on how to setup a Runner agent, see: https://circleci.com/docs/2.0/runner-overview/.
                type: string
            target_platform:
                description: |
                    Pick the target platform for the GameCI image.
                    Available options can be found at https://game.ci/docs/docker/versions.
                    The 2018 release doesn't support the "linux-il2cpp" target platform.
                enum:
                    - appletv
                    - base
                    - universal-windows-platform
                    - windows-il2cpp
                type: enum
            working_directory:
                default: C:\ProgramFiles\CircleCI\Workdir
                description: |
                    Enter the working directory of your runner agent.
                type: string
        resource_class: << parameters.resource_class >>
        working_directory: << parameters.working_directory >>
jobs:
    build:
        description: |
            Simple drop-in job to build your Unity game.
        executor: << parameters.executor >>
        parameters:
            build-method:
                default: ""
                description: |
                    The method used as argument for the Unity CLI "executeMethod" parameter.
                    It must be a valid path to a static method and the class exist in the Assets/Editor directory.
                    If left empty, the default build method will be used.
                type: string
            build-name:
                default: ""
                description: |
                    Enter the name for this build.
                    If left blank, the build will be named after the target platform.
                type: string
            build-target:
                description: |
                    The target platform of your build.
                    Accepted arguments vary with Unity's version and can be found in the docs: https://docs.unity3d.com/2022.2/Documentation/ScriptReference/BuildTarget.html
                type: string
            compress:
                default: true
                description: |
                    Whether to compress the build output to a ".tar.gz" archive.
                    This is recommended if you want to download the built artifacts from the CircleCI web app.
                    If left to "false" for decompressed WebGL builds, you can run the project directly from the CircleCI web app.
                type: boolean
            custom-parameters:
                default: ""
                description: |
                    Additional arguments for the Unity CLI.
                    Use it to pass arguments defined on your custom "build-method" or Unity's build options. Environment variables are supported.
                    The parameters must be separated by space and must be in the format "-key value" or "-key" for booleans.
                    Example: "-customArg1 WebGL -EnableHeadlessMode -customArg2 $CIRCLE_WORKFLOW_ID".
                type: string
            executor:
                description: |
                    Pick an Executor to run the build job with.
                type: executor
            fetch-submodules:
                default: false
                description: |
                    Whether to fetch git submodules
                type: boolean
            no_output_timeout:
                default: 20m
                description: Elapsed time the command can run without output.
                type: string
            project-path:
                default: .
                description: |
                    Enter the path of your Unity project.
                    This should be the directory that has an "Assets" folder inside it.
                type: string
            return-license:
                default: false
                description: |
                    Whether to return the license used to build the project.
                    Unity only allows returning professional licenses.
                type: boolean
            step-name:
                default: Build the project
                description: |
                    Specify a custom step name for the build command, if desired.
                type: string
            store-artifacts:
                default: true
                description: |
                    Whether to store the build output.
                    If left to "false" you won't be able to download the build from the job's artifacts.
                type: boolean
            unity-license-var-name:
                default: UNITY_ENCODED_LICENSE
                description: |
                    Enter the name of the environment variable containing your Unity license file encoded in base64.
                    Required if you have a Personal license.
                type: env_var_name
            unity-password-var-name:
                default: UNITY_PASSWORD
                description: |
                    Enter the name of the environment variable containing your Unity password.
                type: env_var_name
            unity-serial-var-name:
                default: UNITY_SERIAL
                description: |
                    Enter the name of the environment variable containing your Unity serial number.
                    Required if you have a Plus or Pro license.
                type: env_var_name
            unity-username-var-name:
                default: UNITY_USERNAME
                description: |
                    Enter the name of the environment variable containing your Unity username.
                type: env_var_name
        steps:
            - checkout
            - run:
                command: |
                    git submodule sync
                    git submodule update --init
                condition: << parameters.fetch-submodules >>
                name: Fetch submodules
            - prepare-env:
                no_output_timeout: << parameters.no_output_timeout>>
                project-path: <<parameters.project-path>>
                unity-license-var-name: << parameters.unity-license-var-name >>
                unity-password-var-name: << parameters.unity-password-var-name >>
                unity-serial-var-name: << parameters.unity-serial-var-name >>
                unity-username-var-name: << parameters.unity-username-var-name >>
            - build:
                build-method: <<parameters.build-method>>
                build-name: <<parameters.build-name>>
                build-target: <<parameters.build-target>>
                compress: <<parameters.compress>>
                custom-parameters: <<parameters.custom-parameters>>
                no_output_timeout: << parameters.no_output_timeout>>
                project-path: <<parameters.project-path>>
                step-name: << parameters.step-name >>
                store-artifacts: <<parameters.store-artifacts>>
            - when:
                condition: <<parameters.return-license>>
                steps:
                    - return-license:
                        unity-password-var-name: << parameters.unity-password-var-name >>
                        unity-username-var-name: << parameters.unity-username-var-name >>
    create-activation-file:
        description: |
            Simple drop-in job to create a Unity activation file.
        docker:
            - image: unityci/editor:ubuntu-<<parameters.editor_version>>-base-1
        parameters:
            editor_version:
                default: 2021.3.7f1
                description: |
                    Pick the editor version for the GameCI image.
                    Available options can be found at https://game.ci/docs/docker/versions.
                type: string
        resource_class: medium
        steps:
            - checkout
            - run:
                command: |-
                    #!/bin/false
                    # shellcheck shell=bash
                    # shellcheck disable=SC2154

                    create_manual_activation_file() {
                      unity-editor \
                        -batchmode \
                        -nographics \
                        -createManualActivationFile \
                        -quit \
                        -logfile /dev/null

                      # Check if license file was created successfully.
                      if ls Unity_v*.alf &> /dev/null; then return 0; else return 1; fi
                    }

                    if ! create_manual_activation_file; then
                      printf '%s\n' "Failed to create Unity license file."
                      printf '%s\n' "Please try again or open an issue."
                      exit 1
                    fi

                    mv Unity_v*.alf Unity.alf
                name: Create Unity activation file
            - store_artifacts:
                path: Unity.alf
    test:
        description: |
            Simple drop-in job to build your Unity game.
        executor: << parameters.executor >>
        parameters:
            executor:
                description: |
                    Pick an Executor to run the build job with.
                type: executor
            no_output_timeout:
                default: 20m
                description: Elapsed time the command can run without output.
                type: string
            project-path:
                default: .
                description: |
                    Enter the path of your Unity project.
                    This should be the directory that has an "Assets" folder inside it.
                type: string
            return-license:
                default: false
                description: |
                    Whether to return the license used to test the project.
                    Unity only allows returning professional licenses.
                type: boolean
            step-name:
                default: Run tests
                description: |
                    Specify a custom step name for the test command, if desired.
                type: string
            test-platform:
                default: editmode
                description: |
                    Specify the test platform to run tests on.
                    Valid values are "editmode", "playmode" and Unity's target builds.
                    More information can be found on: https://docs.unity3d.com/Packages/com.unity.test-framework@2.0/manual/reference-command-line.html
                type: string
            unity-license-var-name:
                default: UNITY_ENCODED_LICENSE
                description: |
                    Enter the name of the environment variable containing your Unity license file encoded in base64.
                    Required if you have a Personal license.
                type: env_var_name
            unity-password-var-name:
                default: UNITY_PASSWORD
                description: |
                    Enter the name of the environment variable containing your Unity password.
                type: env_var_name
            unity-serial-var-name:
                default: UNITY_SERIAL
                description: |
                    Enter the name of the environment variable containing your Unity serial number.
                    Required if you have a Plus or Pro license.
                type: env_var_name
            unity-username-var-name:
                default: UNITY_USERNAME
                description: |
                    Enter the name of the environment variable containing your Unity username.
                type: env_var_name
        steps:
            - checkout
            - prepare-env:
                no_output_timeout: << parameters.no_output_timeout>>
                project-path: <<parameters.project-path>>
                unity-license-var-name: << parameters.unity-license-var-name >>
                unity-password-var-name: << parameters.unity-password-var-name >>
                unity-serial-var-name: << parameters.unity-serial-var-name >>
                unity-username-var-name: << parameters.unity-username-var-name >>
            - test:
                no_output_timeout: << parameters.no_output_timeout>>
                project-path: << parameters.project-path >>
                step-name: << parameters.step-name >>
                test-platform: << parameters.test-platform >>
            - when:
                condition: <<parameters.return-license>>
                steps:
                    - return-license:
                        unity-password-var-name: << parameters.unity-password-var-name >>
                        unity-username-var-name: << parameters.unity-username-var-name >>
examples:
    test_and_build_personal_license:
        description: |
            Drop-in solution to automatically run tests and build your Unity project using a Personal license. Make sure to read the documentation before using the orb: https://game.ci/docs/circleci/getting-started. For runner examples, see: https://game.ci/docs/circleci/executors#macos-runner and https://game.ci/docs/circleci/executors#windows-runner.
        usage:
            version: "2.1"
            orbs:
                unity: game-ci/unity@1.3.0
            workflows:
                test-build-with-executors:
                    jobs:
                        - checkout
                        - unity/test:
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/ubuntu
                                resource_class: medium
                                target_platform: linux-il2cpp
                            name: test-linux
                            project-path: .
                            step-name: Check if the tests run and results are uploaded
                            test-platform: playmode
                            unity-license-var-name: UNITY_ENCODED_LICENSE
                            unity-password-var-name: UNITY_PASSWORD
                            unity-username-var-name: UNITY_USERNAME
                        - unity/build:
                            build-target: StandaloneLinux64
                            compress: true
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/ubuntu
                                resource_class: large
                                target_platform: linux-il2cpp
                            name: build-linux64-il2cpp
                            project-path: .
                            requires:
                                - test-linux
                            step-name: Build StandaloneLinux64
                            unity-license-var-name: UNITY_ENCODED_LICENSE
                            unity-password-var-name: UNITY_PASSWORD
                            unity-username-var-name: UNITY_USERNAME
                        - unity/test:
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/windows-2022
                                size: large
                                target_platform: windows-il2cpp
                            name: test-windows
                            project-path: .
                            step-name: Check if the tests run and results are uploaded
                            test-platform: playmode
                            unity-license-var-name: UNITY_ENCODED_LICENSE
                            unity-password-var-name: UNITY_PASSWORD
                            unity-username-var-name: UNITY_USERNAME
                        - unity/build:
                            build-target: StandaloneWindows64
                            compress: true
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/windows-2019
                                size: large
                                target_platform: windows-il2cpp
                            name: build-Windows64-il2cpp
                            project-path: .
                            requires:
                                - test-windows
                            step-name: Build StandaloneWindows64 il2cpp
                            unity-license-var-name: UNITY_ENCODED_LICENSE
                            unity-password-var-name: UNITY_PASSWORD
                            unity-username-var-name: UNITY_USERNAME
                        - unity/test:
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/macos
                                resource_class: large
                            name: test-osx
                            project-path: .
                            step-name: Check if the tests run and results are uploaded
                            test-platform: playmode
                            unity-license-var-name: UNITY_ENCODED_LICENSE
                            unity-password-var-name: UNITY_PASSWORD
                            unity-username-var-name: UNITY_USERNAME
                        - unity/build:
                            build-target: StandaloneOSX
                            compress: true
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/macos
                                resource_class: large
                            name: build-osx-il2cpp
                            project-path: .
                            requires:
                                - test-osx
                            step-name: Build macOS IL2CPP
                            unity-license-var-name: UNITY_ENCODED_LICENSE
                            unity-password-var-name: UNITY_PASSWORD
                            unity-username-var-name: UNITY_USERNAME
    test_and_build_pro_or_plus_license:
        description: |
            Drop-in solution to automatically run tests and build your Unity project using a Pro or Plus license. Make sure to read the documentation before using the orb: https://game.ci/docs/circleci/getting-started. For runner examples, see: https://game.ci/docs/circleci/executors#macos-runner and https://game.ci/docs/circleci/executors#windows-runner.
        usage:
            version: "2.1"
            orbs:
                unity: game-ci/unity@1.3.0
            workflows:
                test-build-with-executors:
                    jobs:
                        - checkout
                        - unity/test:
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/ubuntu
                                resource_class: medium
                                target_platform: linux-il2cpp
                            name: test-linux
                            project-path: .
                            step-name: Check if the tests run and results are uploaded
                            test-platform: playmode
                            unity-password-var-name: UNITY_PASSWORD
                            unity-serial-var-name: UNITY_SERIAL
                            unity-username-var-name: UNITY_USERNAME
                        - unity/build:
                            build-target: StandaloneLinux64
                            compress: true
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/ubuntu
                                resource_class: large
                                target_platform: linux-il2cpp
                            name: build-linux64-il2cpp
                            project-path: .
                            requires:
                                - test-linux
                            step-name: Build StandaloneLinux64
                            unity-password-var-name: UNITY_PASSWORD
                            unity-serial-var-name: UNITY_SERIAL
                            unity-username-var-name: UNITY_USERNAME
                        - unity/test:
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/windows-2022
                                size: large
                                target_platform: windows-il2cpp
                            name: test-windows
                            project-path: .
                            step-name: Check if the tests run and results are uploaded
                            test-platform: playmode
                            unity-password-var-name: UNITY_PASSWORD
                            unity-serial-var-name: UNITY_SERIAL
                            unity-username-var-name: UNITY_USERNAME
                        - unity/build:
                            build-target: StandaloneWindows64
                            compress: true
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/windows-2019
                                size: large
                                target_platform: windows-il2cpp
                            name: build-Windows64-il2cpp
                            project-path: .
                            requires:
                                - test-windows
                            step-name: Build StandaloneWindows64 il2cpp
                            unity-password-var-name: UNITY_PASSWORD
                            unity-serial-var-name: UNITY_SERIAL
                            unity-username-var-name: UNITY_USERNAME
                        - unity/test:
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/macos
                                resource_class: large
                            name: test-osx
                            project-path: .
                            step-name: Check if the tests run and results are uploaded
                            test-platform: playmode
                            unity-password-var-name: UNITY_PASSWORD
                            unity-serial-var-name: UNITY_SERIAL
                            unity-username-var-name: UNITY_USERNAME
                        - unity/build:
                            build-target: StandaloneOSX
                            compress: true
                            context: unity
                            executor:
                                editor_version: 2021.3.16f1
                                name: unity/macos
                                resource_class: large
                            name: build-osx-il2cpp
                            project-path: .
                            requires:
                                - test-osx
                            step-name: Build macOS IL2CPP
                            unity-password-var-name: UNITY_PASSWORD
                            unity-serial-var-name: UNITY_SERIAL
                            unity-username-var-name: UNITY_USERNAME

